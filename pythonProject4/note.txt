class: oop를 하기 위한 대상의 특징을 가진 틀
object: class를 가지고 찍어낸 oop의 대상
        대상 == object(객체)
        class를 가지고 찍어낸 대상인 object이
        우리가 프로그래밍할 때 사용하는 실제이다.
        it에서 실제는 instance(인스턴스)라고 한다.
        class의 instance == object



RAM:
1) 클래스의 원본 저장 영역(메서드 영역)
   클래스(멤버변수+멤버함수 원본)
2) 함수를 호출하면 함수를 처리하도록 영역 할당(스택 영역)
   main함수에서 시작!
   함수를 처리하기 위해서는 변수선언이 필요(c1,c2가 필요)
   함수를 처리하기 위해서는 공간이 필요.
   c1 = Car() : c1, color, shape공간이 생성
   c1은 main함수안에 생기는 지역변수(스택영역)
   color, shape은 많은 양이 될 수 있으므로 힙영역에 할당
3) 많은 양의 데이터를 저장하기 위한 영역(힙 영역)




창업문제
------
직원을 뽑으려고 합니다.
Worker('홍길동', 25, '남')
Worker('김길동', 23, '여')
Worker('박길동', 28, '남')
Worker('이길동', 21, '남')
Worker('장길동', 29, '여')
------
1. 전체 직원에 대한 정보를 프린트
2. 직원을 채용할 때마다 지금까지의 직원수를 프린트
3. 직원 나이의 평균 프린트
4. 성별 직원 수 프린트



### my_cal.py
### cal.py, use_cal.py

두 수를 입력받아서, 사칙연산하는 계산기를 만들어보세요.
버튼는 4개 이상이 있어야 함.
[+],[-],[*],[/]
결과는 메시지박스에 넣어주세요.!

- 최소한 함수 4개 이상
- gui이용

객체지향 프로그래밍의 2대 원칙
-----------
1)응집도(높): 클래스가 얼마나 하나의 역할에 응집되어
         만들어져 있는지 정도,
         응집도가 높다라는 것은 하나의 역할만을
         정의해놓았다라는 것. 높을수록 좋다.
2)결합도(낮): 클래스와 클래스간 결합시, 대체불가능하게
        결합하는 경우는 유지보수가 어렵다.
        다른 클래스로 대체가능하게 해놓는 것을
        결합도가 낮다라고 표현.
        낮을수록 좋다.





